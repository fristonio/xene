// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetOauthProvider(params *GetOauthProviderParams) (*GetOauthProviderOK, error)

	GetOauthProviderRedirect(params *GetOauthProviderRedirectParams) (*GetOauthProviderRedirectOK, error)

	GetOauthRefresh(params *GetOauthRefreshParams) (*GetOauthRefreshOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetOauthProvider handles login for xene

  Log in to xene using the configured oauth providers that xene supports.
*/
func (a *Client) GetOauthProvider(params *GetOauthProviderParams) (*GetOauthProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOauthProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOauthProvider",
		Method:             "GET",
		PathPattern:        "/oauth/:provider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOauthProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOauthProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOauthProvider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOauthProviderRedirect handles redirect from the login oauth provider

  redirectHandler handles the redirect from the Oauth provider after the authentication process has
*/
func (a *Client) GetOauthProviderRedirect(params *GetOauthProviderRedirectParams) (*GetOauthProviderRedirectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOauthProviderRedirectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOauthProviderRedirect",
		Method:             "GET",
		PathPattern:        "/oauth/:provider/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOauthProviderRedirectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOauthProviderRedirectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOauthProviderRedirect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOauthRefresh handles authentication token refresh for the oauth provider

  Handles authentication token refresh
*/
func (a *Client) GetOauthRefresh(params *GetOauthRefreshParams) (*GetOauthRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOauthRefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOauthRefresh",
		Method:             "GET",
		PathPattern:        "/oauth/refresh/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOauthRefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOauthRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOauthRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
