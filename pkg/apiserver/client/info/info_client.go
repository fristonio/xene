// Code generated by go-swagger; DO NOT EDIT.

package info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIV1InfoAgentName(params *GetAPIV1InfoAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoAgentNameOK, error)

	GetAPIV1InfoWorkflowWorkflowPipelinePipeline(params *GetAPIV1InfoWorkflowWorkflowPipelinePipelineParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoWorkflowWorkflowPipelinePipelineOK, error)

	GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunID(params *GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunIDOK, error)

	GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpec(params *GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpecParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpecOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPIV1InfoAgentName returns verbose information about the agent
*/
func (a *Client) GetAPIV1InfoAgentName(params *GetAPIV1InfoAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoAgentNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InfoAgentNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1InfoAgentName",
		Method:             "GET",
		PathPattern:        "/api/v1/info/agent/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1InfoAgentNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InfoAgentNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InfoAgentName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1InfoWorkflowWorkflowPipelinePipeline returns verbose information about a workflow
*/
func (a *Client) GetAPIV1InfoWorkflowWorkflowPipelinePipeline(params *GetAPIV1InfoWorkflowWorkflowPipelinePipelineParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoWorkflowWorkflowPipelinePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InfoWorkflowWorkflowPipelinePipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1InfoWorkflowWorkflowPipelinePipeline",
		Method:             "GET",
		PathPattern:        "/api/v1/info/workflow/{workflow}/pipeline/{pipeline}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1InfoWorkflowWorkflowPipelinePipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InfoWorkflowWorkflowPipelinePipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InfoWorkflowWorkflowPipelinePipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunID returns verbose information about a pipeline run
*/
func (a *Client) GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunID(params *GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunID",
		Method:             "GET",
		PathPattern:        "/api/v1/info/workflow/{workflow}/pipeline/{pipeline}/runs/{runID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InfoWorkflowWorkflowPipelinePipelineRunsRunID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpec returns spec of the provided workflow pipeline
*/
func (a *Client) GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpec(params *GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpecParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1InfoWorkflowWorkflowPipelinePipelineSpecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpec",
		Method:             "GET",
		PathPattern:        "/api/v1/info/workflow/{workflow}/pipeline/{pipeline}/spec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1InfoWorkflowWorkflowPipelinePipelineSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
