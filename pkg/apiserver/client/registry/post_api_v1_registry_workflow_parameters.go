// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostAPIV1RegistryWorkflowParams creates a new PostAPIV1RegistryWorkflowParams object
// with the default values initialized.
func NewPostAPIV1RegistryWorkflowParams() *PostAPIV1RegistryWorkflowParams {
	var ()
	return &PostAPIV1RegistryWorkflowParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAPIV1RegistryWorkflowParamsWithTimeout creates a new PostAPIV1RegistryWorkflowParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAPIV1RegistryWorkflowParamsWithTimeout(timeout time.Duration) *PostAPIV1RegistryWorkflowParams {
	var ()
	return &PostAPIV1RegistryWorkflowParams{

		timeout: timeout,
	}
}

// NewPostAPIV1RegistryWorkflowParamsWithContext creates a new PostAPIV1RegistryWorkflowParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAPIV1RegistryWorkflowParamsWithContext(ctx context.Context) *PostAPIV1RegistryWorkflowParams {
	var ()
	return &PostAPIV1RegistryWorkflowParams{

		Context: ctx,
	}
}

// NewPostAPIV1RegistryWorkflowParamsWithHTTPClient creates a new PostAPIV1RegistryWorkflowParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAPIV1RegistryWorkflowParamsWithHTTPClient(client *http.Client) *PostAPIV1RegistryWorkflowParams {
	var ()
	return &PostAPIV1RegistryWorkflowParams{
		HTTPClient: client,
	}
}

/*PostAPIV1RegistryWorkflowParams contains all the parameters to send to the API endpoint
for the post API v1 registry workflow operation typically these are written to a http.Request
*/
type PostAPIV1RegistryWorkflowParams struct {

	/*Workflow
	  Workflow manifest to be created.

	*/
	Workflow string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) WithTimeout(timeout time.Duration) *PostAPIV1RegistryWorkflowParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) WithContext(ctx context.Context) *PostAPIV1RegistryWorkflowParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) WithHTTPClient(client *http.Client) *PostAPIV1RegistryWorkflowParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWorkflow adds the workflow to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) WithWorkflow(workflow string) *PostAPIV1RegistryWorkflowParams {
	o.SetWorkflow(workflow)
	return o
}

// SetWorkflow adds the workflow to the post API v1 registry workflow params
func (o *PostAPIV1RegistryWorkflowParams) SetWorkflow(workflow string) {
	o.Workflow = workflow
}

// WriteToRequest writes these params to a swagger request
func (o *PostAPIV1RegistryWorkflowParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param workflow
	frWorkflow := o.Workflow
	fWorkflow := frWorkflow
	if fWorkflow != "" {
		if err := r.SetFormParam("workflow", fWorkflow); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
