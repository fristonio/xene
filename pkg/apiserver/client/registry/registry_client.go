// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new registry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV1RegistryAgentName(params *DeleteAPIV1RegistryAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV1RegistryAgentNameOK, error)

	DeleteAPIV1RegistrySecretName(params *DeleteAPIV1RegistrySecretNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV1RegistrySecretNameOK, error)

	DeleteAPIV1RegistryWorkflowName(params *DeleteAPIV1RegistryWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV1RegistryWorkflowNameOK, error)

	GetAPIV1RegistryAgent(params *GetAPIV1RegistryAgentParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryAgentOK, error)

	GetAPIV1RegistryAgentName(params *GetAPIV1RegistryAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryAgentNameOK, error)

	GetAPIV1RegistryListAgents(params *GetAPIV1RegistryListAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryListAgentsOK, error)

	GetAPIV1RegistryListSecrets(params *GetAPIV1RegistryListSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryListSecretsOK, error)

	GetAPIV1RegistryListWorkflows(params *GetAPIV1RegistryListWorkflowsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryListWorkflowsOK, error)

	GetAPIV1RegistrySecret(params *GetAPIV1RegistrySecretParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistrySecretOK, error)

	GetAPIV1RegistrySecretName(params *GetAPIV1RegistrySecretNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistrySecretNameOK, error)

	GetAPIV1RegistryWorkflow(params *GetAPIV1RegistryWorkflowParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryWorkflowOK, error)

	GetAPIV1RegistryWorkflowName(params *GetAPIV1RegistryWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryWorkflowNameOK, error)

	PatchAPIV1RegistryAgentName(params *PatchAPIV1RegistryAgentNameParams, authInfo runtime.ClientAuthInfoWriter) error

	PatchAPIV1RegistrySecretName(params *PatchAPIV1RegistrySecretNameParams, authInfo runtime.ClientAuthInfoWriter) error

	PatchAPIV1RegistryWorkflowName(params *PatchAPIV1RegistryWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) error

	PatchAPIV1StatusWorkflowName(params *PatchAPIV1StatusWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) error

	PostAPIV1RegistryAgent(params *PostAPIV1RegistryAgentParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1RegistryAgentOK, error)

	PostAPIV1RegistrySecret(params *PostAPIV1RegistrySecretParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1RegistrySecretOK, error)

	PostAPIV1RegistryWorkflow(params *PostAPIV1RegistryWorkflowParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1RegistryWorkflowOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIV1RegistryAgentName deletes the specified agent from the store

  Deletes the agent specified by the name parameter, if the agent is not
*/
func (a *Client) DeleteAPIV1RegistryAgentName(params *DeleteAPIV1RegistryAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV1RegistryAgentNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV1RegistryAgentNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV1RegistryAgentName",
		Method:             "DELETE",
		PathPattern:        "/api/v1/registry/agent/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV1RegistryAgentNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV1RegistryAgentNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV1RegistryAgentName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV1RegistrySecretName deletes the specified secret from the store

  Deletes the secret specified by the name parameter, if the secret is not
*/
func (a *Client) DeleteAPIV1RegistrySecretName(params *DeleteAPIV1RegistrySecretNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV1RegistrySecretNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV1RegistrySecretNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV1RegistrySecretName",
		Method:             "DELETE",
		PathPattern:        "/api/v1/registry/secret/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV1RegistrySecretNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV1RegistrySecretNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV1RegistrySecretName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIV1RegistryWorkflowName deletes the specified workflow from the store

  Deletes the workflow specified by the name parameter, if the workflow is not
*/
func (a *Client) DeleteAPIV1RegistryWorkflowName(params *DeleteAPIV1RegistryWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV1RegistryWorkflowNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV1RegistryWorkflowNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV1RegistryWorkflowName",
		Method:             "DELETE",
		PathPattern:        "/api/v1/registry/workflow/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV1RegistryWorkflowNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV1RegistryWorkflowNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV1RegistryWorkflowName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistryAgent returns the specified agent object from the store

  If a name is provided return the corresponding agent object, if prefix is set to some value
*/
func (a *Client) GetAPIV1RegistryAgent(params *GetAPIV1RegistryAgentParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistryAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistryAgent",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/agent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistryAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistryAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistryAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistryAgentName returns the specified agent object from the store with the name in params
*/
func (a *Client) GetAPIV1RegistryAgentName(params *GetAPIV1RegistryAgentNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryAgentNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistryAgentNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistryAgentName",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/agent/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistryAgentNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistryAgentNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistryAgentName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistryListAgents lists all the keys of items in the registry of the provided type agent
*/
func (a *Client) GetAPIV1RegistryListAgents(params *GetAPIV1RegistryListAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryListAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistryListAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistryListAgents",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/list/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistryListAgentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistryListAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistryListAgents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistryListSecrets lists all the keys of items in the registry of the provided type agent
*/
func (a *Client) GetAPIV1RegistryListSecrets(params *GetAPIV1RegistryListSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryListSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistryListSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistryListSecrets",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/list/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistryListSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistryListSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistryListSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistryListWorkflows gathers information about all the workflow objects managed by xene
*/
func (a *Client) GetAPIV1RegistryListWorkflows(params *GetAPIV1RegistryListWorkflowsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryListWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistryListWorkflowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistryListWorkflows",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/list/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistryListWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistryListWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistryListWorkflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistrySecret returns the specified secret object from the store

  If a name is provided return the corresponding secret object, if prefix is set to some value
*/
func (a *Client) GetAPIV1RegistrySecret(params *GetAPIV1RegistrySecretParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistrySecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistrySecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistrySecret",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/secret",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistrySecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistrySecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistrySecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistrySecretName returns the specified secret object from the store with the name in params
*/
func (a *Client) GetAPIV1RegistrySecretName(params *GetAPIV1RegistrySecretNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistrySecretNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistrySecretNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistrySecretName",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/secret/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistrySecretNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistrySecretNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistrySecretName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistryWorkflow returns the specified workflow object from the store

  If a name is provided return the corresponding workflow object, if prefix  is set to some value
*/
func (a *Client) GetAPIV1RegistryWorkflow(params *GetAPIV1RegistryWorkflowParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistryWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistryWorkflow",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistryWorkflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistryWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistryWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV1RegistryWorkflowName returns the specified workflow object from the store with the name in params
*/
func (a *Client) GetAPIV1RegistryWorkflowName(params *GetAPIV1RegistryWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV1RegistryWorkflowNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1RegistryWorkflowNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV1RegistryWorkflowName",
		Method:             "GET",
		PathPattern:        "/api/v1/registry/workflow/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1RegistryWorkflowNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1RegistryWorkflowNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1RegistryWorkflowName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIV1RegistryAgentName patches the specified agent from the store
*/
func (a *Client) PatchAPIV1RegistryAgentName(params *PatchAPIV1RegistryAgentNameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV1RegistryAgentNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIV1RegistryAgentName",
		Method:             "PATCH",
		PathPattern:        "/api/v1/registry/agent/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV1RegistryAgentNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PatchAPIV1RegistrySecretName patches the specified secret from the store
*/
func (a *Client) PatchAPIV1RegistrySecretName(params *PatchAPIV1RegistrySecretNameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV1RegistrySecretNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIV1RegistrySecretName",
		Method:             "PATCH",
		PathPattern:        "/api/v1/registry/secret/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV1RegistrySecretNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PatchAPIV1RegistryWorkflowName patches the specified workflow from the store
*/
func (a *Client) PatchAPIV1RegistryWorkflowName(params *PatchAPIV1RegistryWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV1RegistryWorkflowNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIV1RegistryWorkflowName",
		Method:             "PATCH",
		PathPattern:        "/api/v1/registry/workflow/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV1RegistryWorkflowNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PatchAPIV1StatusWorkflowName patches the specified workflow status from the store
*/
func (a *Client) PatchAPIV1StatusWorkflowName(params *PatchAPIV1StatusWorkflowNameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV1StatusWorkflowNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIV1StatusWorkflowName",
		Method:             "PATCH",
		PathPattern:        "/api/v1/status/workflow/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV1StatusWorkflowNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PostAPIV1RegistryAgent creates a new agent in the store
*/
func (a *Client) PostAPIV1RegistryAgent(params *PostAPIV1RegistryAgentParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1RegistryAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1RegistryAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1RegistryAgent",
		Method:             "POST",
		PathPattern:        "/api/v1/registry/agent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1RegistryAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1RegistryAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1RegistryAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1RegistrySecret creates a new secret in the store
*/
func (a *Client) PostAPIV1RegistrySecret(params *PostAPIV1RegistrySecretParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1RegistrySecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1RegistrySecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1RegistrySecret",
		Method:             "POST",
		PathPattern:        "/api/v1/registry/secret",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1RegistrySecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1RegistrySecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1RegistrySecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1RegistryWorkflow creates a new workflow in the store

  This route creates a new workflow for xene to operate on, if the workflow already exists
*/
func (a *Client) PostAPIV1RegistryWorkflow(params *PostAPIV1RegistryWorkflowParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1RegistryWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1RegistryWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1RegistryWorkflow",
		Method:             "POST",
		PathPattern:        "/api/v1/registry/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1RegistryWorkflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1RegistryWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1RegistryWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
