// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fristonio/xene/pkg/apiserver/models"
)

// PatchAPIV1RegistryWorkflowNameReader is a Reader for the PatchAPIV1RegistryWorkflowName structure.
type PatchAPIV1RegistryWorkflowNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIV1RegistryWorkflowNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewPatchAPIV1RegistryWorkflowNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchAPIV1RegistryWorkflowNameBadRequest creates a PatchAPIV1RegistryWorkflowNameBadRequest with default headers values
func NewPatchAPIV1RegistryWorkflowNameBadRequest() *PatchAPIV1RegistryWorkflowNameBadRequest {
	return &PatchAPIV1RegistryWorkflowNameBadRequest{}
}

/*PatchAPIV1RegistryWorkflowNameBadRequest handles this case with default header values.

Bad Request
*/
type PatchAPIV1RegistryWorkflowNameBadRequest struct {
	Payload *models.ResponseHTTPError
}

func (o *PatchAPIV1RegistryWorkflowNameBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/registry/workflow/{name}][%d] patchApiV1RegistryWorkflowNameBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAPIV1RegistryWorkflowNameBadRequest) GetPayload() *models.ResponseHTTPError {
	return o.Payload
}

func (o *PatchAPIV1RegistryWorkflowNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseHTTPError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
