{
    "swagger": "2.0",
    "info": {
        "description": "Xene is the workflow creator and manager tool",
        "title": "Xene API server",
        "contact": {
            "name": "Deepesh Pathak",
            "url": "https://dpathak.co",
            "email": "deepeshpathak09@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.1.0"
    },
    "host": "localhost:6060",
    "basePath": "/",
    "paths": {
        "/api/v1/authok": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "auth OK handler handles the ping to api routes which are",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Handles ping event for api routes.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/info/agent/{name}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Returns verbose information about the agent.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the agent to get information about.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.AgentVerboseInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/info/workflow/{workflow}/pipeline/{pipeline}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Returns verbose information about a workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow to get information about.",
                        "name": "workflow",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the pipeline to return the info about.",
                        "name": "pipeline",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PipelineInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/info/workflow/{workflow}/pipeline/{pipeline}/runs/{runID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Returns verbose information about a pipeline run.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow to get information about.",
                        "name": "workflow",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the pipeline to return the info about.",
                        "name": "pipeline",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "RUN ID of the pipeline run.",
                        "name": "runID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PipelineRunVerboseInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/info/workflow/{workflow}/pipeline/{pipeline}/spec": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Returns spec of the provided workflow pipeline.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow to get information about.",
                        "name": "workflow",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the pipeline to return the info about.",
                        "name": "pipeline",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/registry/agent": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "If a name is provided return the corresponding agent object, if prefix is set to some value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Returns the specified agent object from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix based get for agent.",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the agent to get.",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Creates a new agent in the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent manifest to be created.",
                        "name": "agent",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/registry/agent/{name}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Returns the specified agent object from the store with the name in params.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the agent to get.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the agent specified by the name parameter, if the agent is not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Deletes the specified agent from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the agent to be deleted.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Patches the specified agent from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the agent to be patched.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/registry/list/agents": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "List all the keys of items in the registry of the provided type agent.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.AgentInfo"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/registry/list/secrets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "List all the keys of items in the registry of the provided type agent.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.SecretInfo"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/registry/list/workflows": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Gather information about all the workflow objects managed by xene.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.WorkflowInfo"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/registry/secret": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "If a name is provided return the corresponding secret object, if prefix is set to some value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Returns the specified secret object from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix based get for secret.",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the secret to get.",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Creates a new secret in the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "secret manifest to be created.",
                        "name": "secret",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/registry/secret/{name}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Returns the specified secret object from the store with the name in params.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the secret to get.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the secret specified by the name parameter, if the secret is not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Deletes the specified secret from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the secret to be deleted.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Patches the specified secret from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the secret to be patched.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/registry/workflow": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "If a name is provided return the corresponding workflow object, if prefix  is set to some value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Returns the specified workflow object from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix based get for workflow.",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the workflow to get.",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This route creates a new workflow for xene to operate on, if the workflow already exists",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Creates a new workflow in the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow manifest to be created.",
                        "name": "workflow",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/registry/workflow/{name}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Returns the specified workflow object from the store with the name in params.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the workflow to get.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the workflow specified by the name parameter, if the workflow is not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Deletes the specified workflow from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow to be deleted.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Patches the specified workflow from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow to be patched.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/status/workflow": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Returns the specified workflowStatus object from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix based get for workflow status documents.",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the workflow to get status object for.",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This route creates a new workflow status for xene to operate on, if the workflow already exists",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Creates a new workflow status in the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "WorkflowStatus manifest to be created.",
                        "name": "workflow",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/status/workflow/{name}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Returns the specified workflow object from the store with the name in params.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the workflow to get status document for.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RegistryItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the workflow status specified by the name parameter, if the workflow is not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Deletes the specified workflow from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow status to be deleted.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registry"
                ],
                "summary": "Patches the specified workflow status from the store.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow status to be patched.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/webhook/trigger/{workflow}/pipeline/{pipeline}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhook"
                ],
                "summary": "Webhook endpoints to trigger the pipelines of a particular workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the workflow.",
                        "name": "workflow",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the pipeline to be triggered.",
                        "name": "pipeline",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the API server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health route for Xene API server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPMessage"
                        }
                    }
                }
            }
        },
        "/oauth/:provider": {
            "get": {
                "description": "Log in to xene using the configured oauth providers that xene supports.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Handles login for xene",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider for oauth login",
                        "name": "provider",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.OauthLogin"
                        }
                    }
                }
            }
        },
        "/oauth/:provider/redirect": {
            "get": {
                "description": "redirectHandler handles the redirect from the Oauth provider after the authentication process has",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Handles redirect from the login oauth provider.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider for the oauth redirect",
                        "name": "provider",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.JWTAuth"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        },
        "/oauth/refresh/": {
            "get": {
                "description": "Handles authentication token refresh",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Handle authentication token refresh for the oauth provider.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.JWTAuth"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "response.AgentInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "available": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean"
                }
            }
        },
        "response.AgentSecretInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.AgentTriggerInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "pipelines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "response.AgentVerboseInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "healthy": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.AgentSecretInfo"
                    }
                },
                "secure": {
                    "type": "boolean"
                },
                "serverName": {
                    "type": "string"
                },
                "workflows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.AgentWorkflowInfo"
                    }
                }
            }
        },
        "response.AgentWorkflowInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.AgentTriggerInfo"
                    }
                }
            }
        },
        "response.HTTPError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid authentication type provided."
                }
            }
        },
        "response.HTTPMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Messsage in response to your request"
                }
            }
        },
        "response.JWTAuth": {
            "type": "object",
            "properties": {
                "expiresIn": {
                    "type": "string",
                    "example": "3600"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "userEmail": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "userName": {
                    "type": "string",
                    "example": "fristonio"
                }
            }
        },
        "response.KVPair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "response.OauthLogin": {
            "type": "object",
            "properties": {
                "loginURL": {
                    "description": "LoginURL is the URL to be used for logging in.",
                    "type": "string",
                    "example": "https://xxxx.io/login"
                }
            }
        },
        "response.PipelineInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "runs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.PipelineRunInfo"
                    }
                },
                "spec": {
                    "type": "string"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflow": {
                    "type": "string"
                }
            }
        },
        "response.PipelineRunInfo": {
            "type": "object",
            "properties": {
                "agent": {
                    "type": "string"
                },
                "endTime": {
                    "type": "integer"
                },
                "runID": {
                    "type": "string"
                },
                "startTime": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.PipelineRunVerboseInfo": {
            "type": "object",
            "properties": {
                "baseLogURL": {
                    "type": "string"
                },
                "runID": {
                    "type": "string"
                },
                "runInfo": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.RegistryItem": {
            "type": "object",
            "properties": {
                "item": {
                    "description": "Items contains the Serialized kvstore item",
                    "type": "object",
                    "$ref": "#/definitions/response.KVPair"
                }
            }
        },
        "response.RegistryItemsFromPrefix": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 2
                },
                "items": {
                    "description": "Items contains the Serialized kvstore items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.KVPair"
                    }
                }
            }
        },
        "response.SecretInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "restricted": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.WorkflowInfo": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "pipelines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        }
    }
}