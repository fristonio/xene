syntax = "proto3";

package proto;

option go_package = ".;proto";

// Generate file by the following command
// protoc -I pkg/proto pkg/proto/agent.proto --go_out=plugins=grpc:pkg/proto

message Pipeline {
    // spec contains the actual spec of the pipeline. Each pipeline
    // is evaluated at the agent only. The work of the apiserver
    // is to schedule pipelines corresponding to a workflow on a number
    // of worker agents.
    string Spec = 1;

    // Name contains the name of the pipeline as configured in
    // the workflow spec.
    string Name = 2;

    // Workflow contains the name of the workflow the pipeline is configured for
    string Workflow = 3;

    // Name contains the name of the trigger as configured in
    // the workflow spec.
    string TriggerName = 4;

    // spec contains the actual spec of the trigger.
    string TriggerSpec = 5;
}

message PipelineStatus {
    // Executor contains the name of the agent which ran the pipeline.
    string Executor = 1;

    // status contains the current status of the pipeline.
    // It can be one of the preconfigured statuses for a pipeline.
    string Status = 2;
}

message StatusOpts {
    // Verbose specify if the status information returned should be verbose or not.
    bool Verbose = 1;
}

message AgentStatus {
    // Healthy is a boolean value which specifies the health status of the agent.
    bool Healthy = 1;
}

message AgentTriggerInfo {
    // Name contains the name of the trigger.
    string Name = 1;

    // Pipelines contains the name of the pipelines.
    repeated string Pipelines = 2;
}

message AgentWorkflowInfo {
    // Name contains the name of the workflow.
    string Name = 1;

    repeated AgentTriggerInfo Triggers = 2;
}

message AgentSecretInfo {
    // Name contains the name of the secret.
    string Name = 1;

    // Type contains the type of the secret associated.
    string Type = 2;
}

message AgentInfo {
    // Healthy specifies wheather the agent is healthy or not.
    bool Healthy = 1;

    // Name contains the name of the agent.
    string Name = 2;

    // Address contains the address of the agent.
    string Address = 3;

    // Secure shows if the agent is running in secure mode or not.
    bool Secure = 4;

    // ServerName contains the server name of the running agent.
    string ServerName = 5;

    // Workflows contains the information about individual
    // workflow components scheduled on the agent.
    // The information for the workflow type is restricted for the scope of the agent
    // only.
    // Which means it only contains the triggers and pipelines scheduled on the agent.
    repeated AgentWorkflowInfo Workflows = 6;

    // Secrets contains the list of secrets associated with the agent.
    repeated AgentSecretInfo Secrets = 7;
}

message AgentInfoOpts {
}

message PipelineInfoOpts {
    string Name = 1;

    string Workflow = 2;

    string RunID = 3;
}

message PipelineRunInfo {
    string RunID = 1;

    string Agent = 2;

    string Status = 3;

    int64 StartTime = 4;

    int64 EndTime = 5;
}

message PipelinesRunInfo {
    string Name = 1;

    string ErrorMessage = 2;

    repeated PipelineRunInfo Pipelines = 3;
}

message PipelineRunStatus {
    string Spec = 2;
}

// AgentService describes the grpc service running in the agent
service AgentService {
    // Status returns the status of the agent service running.
    rpc Status(StatusOpts) returns (AgentStatus) {}

    // UpdatePipeline is the RPC to update a pipeline on to the agent
    rpc UpdatePipeline(Pipeline) returns (PipelineStatus) {}

    // SchedulePipeline is the RPC to schedule a pipeline on to the agent
    rpc SchedulePipeline(Pipeline) returns (PipelineStatus) {}

    // RemovePipeline is the RPC to remove a pipeline from the agent.
    rpc RemovePipeline(Pipeline) returns (PipelineStatus) {}

    // Info returns the information about the agent.
    rpc Info(AgentInfoOpts) returns (AgentInfo) {}

    // GetPipelinesRunInfo returns the list of run info for the requested pipeline.
    rpc GetPipelinesRunInfo(PipelineInfoOpts) returns (PipelinesRunInfo) {}

    // GetPipelineRunStatus returns the info about a particular pipeline run.
    rpc GetPipelineRunStatus(PipelineInfoOpts) returns (PipelineRunStatus) {}
}
