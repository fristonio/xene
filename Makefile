SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
.DELETE_ON_ERROR:
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

ifeq ($(origin .RECIPEPREFIX), undefined)
  $(error This Make does not support .RECIPEPREFIX. Please use GNU Make 4.0 or later)
endif
.RECIPEPREFIX = >

export GO111MODULE := on
ROOTDIR := $(shell pwd)
VENDORDIR := $(ROOTDIR)/vendor
QUIET=@
VERIFYARGS ?=

GOOS ?=
GOOS := $(if $(GOOS),$(GOOS),linux)
GOARCH ?=
GOARCH := $(if $(GOARCH),$(GOARCH),amd64)
GOENV  := CGO_ENABLED=0 GOOS=$(GOOS) GOARCH=$(GOARCH)
GO     := $(GOENV) go
GO_BUILD := $(GO) build -trimpath

pkgs  = $(shell $(GO) list ./... | grep -v vendor)

help:
> @echo "Xene - Makefile"
> @echo ""
> @echo "Available make targets:"
> @echo ""
> @echo "* build: Run build script to build xene binary."
> @echo "* check-lint: Check if the formatting is correct for the go code, using golangci lint."
> @echo "* fix-lint: Fixes lint errors generated by golangci lint"
> @echo "* format: Format go code in the repository, run this before committing anything."
> @echo "* govet: Run govet on the code to check for any mistakes."
> @echo "* docs: Build docs site using mkdocs in site/ directory"

# Build status
build:
> @echo "Building xene..."
> @./scripts/build/build.sh

# Check go formatting
check-lint:
> @echo "[*] Checking for formatting and linting errors"
> @./scripts/build/check_fmt.sh
> @golangci-lint run ./...

fix-lint:
> @echo "[*] Fixing lint errors using golangci-lint"
> @golangci-lint run ./... --fix

# Format code using gofmt
format:
> @echo "[*] Formatting code"
> @$(GO) fmt $(pkgs)

# Vet code using go vet
govet:
> @echo "[*] Vetting code, checking for mistakes"
> @$(GO) vet $(pkgs)

docs:
> @echo "[*] Building docs.."
> @rm -rf site/
> @mkdocs build

.PHONY: build format check-lint fix-lint govet help docs
